import React, { useState, useEffect } from "react";
import Web3 from "web3";
import { ethers } from "ethers";  // Import ethers for formatEther
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer, toast } from "react-toastify";
import contractData from "./contracts/LandRegistry.json";
import axios from "axios";

const CONTRACT_ADDRESS = contractData.networks[1337]?.address || "0xYourContractAddress";
const CONTRACT_ABI = contractData.abi;
const API_KEY = "774412af0849ba9bf5f5";
const SECRET_KEY = "da8ff56a076fb5ed2bbaba5b404b25801a250509d08fd60d68c361867ca88bd8";

const App = () => {
    const [account, setAccount] = useState(null);
    const [lands, setLands] = useState([]);
    const [contract, setContract] = useState(null);
    const [web3, setWeb3] = useState(null);
    const [landData, setLandData] = useState({ location: "", price: "", document: null });

    useEffect(() => {
        loadBlockchainData();
    }, []);

    const loadBlockchainData = async () => {
        if (window.ethereum) {
            const web3Instance = new Web3(window.ethereum);
            setWeb3(web3Instance);
            
            await window.ethereum.request({ method: "eth_requestAccounts" });
            const accounts = await web3Instance.eth.getAccounts();
            setAccount(accounts[0]);
            
            const contractInstance = new web3Instance.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);
            setContract(contractInstance);
            
            fetchLands(contractInstance);
        } else {
            toast.error("MetaMask not detected! Please install it.");
        }
    };

    const fetchLands = async (contractInstance) => {
        try {
            const landCount = await contractInstance.methods.landCount().call();
            const landsArray = [];
            for (let i = 1; i <= landCount; i++) {
                const land = await contractInstance.methods.getLand(i).call();
                landsArray.push({ 
                    id: i, 
                    owner: land[0], 
                    location: land[1], 
                    price: land[2], 
                    isAvailable: land[3], 
                    cid: land[4] 
                });
            }
            setLands(landsArray);
        } catch (error) {
            console.error("Error fetching lands:", error);
            toast.error("Failed to load registered lands.");
        }
    };

    const handleFileUpload = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        if (file.type !== "application/pdf") {
            toast.error("Only PDF files are allowed!");
            e.target.value = null;
            return;
        }
        setLandData({ ...landData, document: file });
    };

    const uploadToPinata = async (file) => {
        const formData = new FormData();
        formData.append("file", file);

        const metadata = JSON.stringify({ name: file.name });
        formData.append("pinataMetadata", metadata);

        const config = {
            headers: {
                "Content-Type": "multipart/form-data",
                pinata_api_key: API_KEY,
                pinata_secret_api_key: SECRET_KEY,
            },
        };

        try {
            const response = await axios.post("https://api.pinata.cloud/pinning/pinFileToIPFS", formData, config);
            return response.data.IpfsHash;
        } catch (error) {
            console.error("Pinata Upload Error:", error);
            toast.error("Failed to upload document to Pinata.");
            return null;
        }
    };

    const registerLand = async () => {
        if (!landData.location || !landData.price || !landData.document) {
            toast.error("Please enter location, price, and upload a document.");
            return;
        }

        try {
            const registrationFee = await contract.methods.registrationFee().call();
            const ipfsHash = await uploadToPinata(landData.document);
            if (!ipfsHash) {
                toast.error("Failed to upload document to Pinata.");
                return;
            }

            await contract.methods.registerLand(
                landData.location, 
                web3.utils.toWei(landData.price, "ether"),
                ipfsHash
            ).send({
                from: account,
                value: registrationFee,
            });

            toast.success("Land registered successfully!");
            fetchLands(contract);
        } catch (error) {
            console.error("Error in registerLand:", error);
            toast.error("Failed to register land.");
        }
    };

    const buyLand = async (landId, price) => {
        if (!contract || !account) {
            toast.error("Smart contract not loaded or account not connected.");
            return;
        }
    
        try {
            await contract.methods.buyLand(landId).send({
                from: account,
                value: price,  // Send the exact amount required for the purchase
            });
    
            toast.success("Land purchased successfully!");
            fetchLands(contract); // Refresh the land list
        } catch (error) {
            console.error("Error buying land:", error);
            toast.error("Failed to purchase land.");
        }
    };

    return (
        <div>
            <h1>Land Registry DApp</h1>
            <p>Connected Account: {account || "Not connected"}</p>

            <h2>Register Land</h2>
            <input type="text" placeholder="Location" onChange={(e) => setLandData({ ...landData, location: e.target.value })} />
            <input type="text" placeholder="Price (ETH)" onChange={(e) => setLandData({ ...landData, price: e.target.value })} />
            <input type="file" accept="application/pdf" onChange={handleFileUpload} />
            <button onClick={registerLand}>Register Land</button>

            <h2>Registered Lands</h2>
            {lands.length > 0 ? (
                lands.map((land) => (
                    <div key={land.id} style={{ border: "1px solid black", padding: "10px", margin: "10px" }}>
                        <p><strong>ID:</strong> {land.id}</p>
                        <p><strong>Owner:</strong> {land.owner}</p>
                        <p><strong>Location:</strong> {land.location}</p>
                        <p><strong>Price:</strong> {ethers.formatEther(land.price)} ETH</p>
                        <p><strong>Status:</strong> {land.isAvailable ? "For Sale" : "Sold"}</p>
                        <p>
                            <strong>Document:</strong> 
                            <a href={`https://gateway.pinata.cloud/ipfs/${land.cid}`} target="_blank" rel="noopener noreferrer">
                                View Document
                            </a>
                        </p>
                        {land.isAvailable && land.owner !== account && (
                            <button onClick={() => buyLand(land.id, land.price)}>Buy</button>
                        )}
                    </div>
                ))
            ) : (
                <p>No lands registered yet.</p>
            )}
            <ToastContainer />
        </div>
    );
};

export default App;


solditiy


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract LandRegistry is ERC721URIStorage, Ownable {
    uint256 public registrationFee = 0.01 ether;
    uint256 public landCount = 0;
    uint256 public tokenIdCounter = 1;

    struct Land {
        address owner;
        string location;
        uint256 price; // Total price for whole land (if no NFTs)
        uint256 pricePerToken; // Price per NFT token (if NFTs exist)
        bool isAvailable;
        string cid; // IPFS CID for document
        uint256 tokenCount; // NFT tokens count (0 means no NFT)
        uint256[] tokenIds; // NFT token IDs
    }

    mapping(uint256 => Land) public lands;
    mapping(uint256 => address) public tokenOwners; // Track NFT ownership

    event LandRegistered(uint256 landId, address owner, string location, uint256 price, string cid, uint256 tokenCount);
    event LandTokenBought(uint256 landId, address newOwner, uint256 tokenId, uint256 price);
    event LandBought(uint256 landId, address newOwner, uint256 price);
    event NFTMinted(uint256 indexed tokenId, uint256 indexed landId, address owner, string tokenURI);

    constructor() ERC721("LandNFT", "LND") Ownable() {}

    function registerLand(
        string memory _location,
        uint256 _price,
        uint256 _pricePerToken,
        string memory _cid,
        uint256 _tokenCount
    ) public payable {
        require(msg.value == registrationFee, "Incorrect registration fee amount");
    
        // Emit the LandRegistered event
        emit LandRegistered(landCount, msg.sender, _location, _price, _cid, _tokenCount);
    
        // Initialize an array to store token IDs (if NFTs are being minted)
        uint256[] memory tokenIds = new uint256[](_tokenCount);
    
        // If _tokenCount > 0, mint NFTs
        if (_tokenCount > 0) {
            require(_pricePerToken > 0, "NFT price must be set");
    
            for (uint256 i = 0; i < _tokenCount; i++) {
                uint256 newTokenId = tokenIdCounter++;
                _mint(msg.sender, newTokenId); // Mint the NFT
                _setTokenURI(newTokenId, _cid); // Set the token URI
                tokenIds[i] = newTokenId; // Store the token ID
                tokenOwners[newTokenId] = msg.sender; // Record the owner
                emit NFTMinted(newTokenId, landCount, msg.sender, _cid); // Emit NFTMinted event
            }
        }
        // Increment landCount and store land details
        landCount++;
        bool availability = _tokenCount > 0 ? true : (_price > 0); // Set availability
        lands[landCount] = Land(
            msg.sender, // Owner
            _location, // Location
            _price, // Price
            _pricePerToken, // Price per token
            availability, // Availability
            _cid, // CID
            _tokenCount, // Token count
            tokenIds // Token IDs
        );
    }    
    /// @notice Buy the whole land without NFT tokens
    function buyLand(uint256 _landId, uint256 _tokensToBuy) public payable {
        require(_landId > 0 && _landId <= landCount, "Invalid land ID");
    
        Land storage land = lands[_landId];
        require(land.isAvailable, "Land is not available for sale");
    
        address previousOwner = land.owner;
    
        if (land.tokenCount > 0) {
            // Buying NFTs from land registered with NFTs
            require(_tokensToBuy > 0 && _tokensToBuy <= land.tokenCount, "Invalid token amount");
    
            uint256 totalPrice = _tokensToBuy * land.pricePerToken;
            require(msg.value == totalPrice, "Incorrect ETH amount sent");
    
            uint256 tokensTransferred = 0;
    
            // Transfer NFT tokens
            for (uint256 i = 0; i < land.tokenIds.length && tokensTransferred < _tokensToBuy; i++) {
                uint256 tokenId = land.tokenIds[i];
    
                if (tokenOwners[tokenId] == previousOwner) {
                    _transfer(previousOwner, msg.sender, tokenId);
                    tokenOwners[tokenId] = msg.sender;
                    tokensTransferred++;
    
                    emit LandTokenBought(_landId, msg.sender, tokenId, land.pricePerToken);
                }
            }
    
            require(tokensTransferred == _tokensToBuy, "Not enough available tokens");
    
            // Update remaining token count
            land.tokenCount -= _tokensToBuy;
            if (land.tokenCount == 0) {
                land.isAvailable = false; // Mark land as unavailable if all tokens are sold
            }
        } else {
            // Buying land without NFTs
            require(_tokensToBuy == 0, "This land does not have NFTs");
            require(msg.value == land.price, "Incorrect ETH amount sent");
    
            // Transfer ownership
            land.owner = msg.sender;
            land.isAvailable = false;
    
            emit LandBought(_landId, msg.sender, land.price);
        }
    
        // Transfer payment to seller
        (bool success, ) = payable(previousOwner).call{value: msg.value}("");
        require(success, "Transfer to seller failed");
    }
    function getLand(uint256 _landId) public view returns (address, string memory, uint256, uint256, bool, string memory, uint256, uint256[] memory) {
        require(_landId > 0 && _landId <= landCount, "Invalid land ID");
        Land memory land = lands[_landId];
        return (land.owner, land.location, land.price, land.pricePerToken, land.isAvailable, land.cid, land.tokenCount, land.tokenIds);
    }

    function setRegistrationFee(uint256 _newFee) public onlyOwner {
        registrationFee = _newFee;
    }

    function withdraw() public onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds to withdraw");

        (bool success, ) = payable(owner()).call{value: balance}("");
        require(success, "Withdraw failed");
    }
}

npm install @openzeppelin/contracts
